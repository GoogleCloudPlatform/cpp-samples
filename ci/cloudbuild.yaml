# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

timeout: 3600s
options:
  machineType: 'N1_HIGHCPU_32'
  diskSizeGb: '512'
  env:
    - 'VCPKG_BINARY_SOURCES=x-gcs,${_VCPKG_BUCKET_PREFIX},readwrite'
substitutions:
  _VCPKG_BUCKET_PREFIX: 'gs://cloud-cpp-testing-resources-vcpkg-cache/cpp-samples'

steps:
  # Create a container will all the development tools
  - name: 'gcr.io/kaniko-project/executor:v1.13.0'
    args: [
        "--context=dir:///workspace/",
        "--dockerfile=ci/devtools.Dockerfile",
        "--cache=true",
        "--cache-repo=gcr.io/${PROJECT_ID}/cpp-samples/ci/cache",
        "--destination=gcr.io/${PROJECT_ID}/cpp-samples/ci/devtools:${BUILD_ID}",
    ]
    timeout: 1800s
  - name: 'gcr.io/cloud-builders/docker'
    args: [ 'pull', 'gcr.io/${PROJECT_ID}/cpp-samples/ci/devtools:${BUILD_ID}' ]

  # Warmup the vcpkg binary cache. Most of the time this has no effect, as the
  # cache is warm from previous builds.  When we update vcpkg, or the compiler,
  # or make any change that invalidates the cache this will be the slowest
  # step.
  #
  # If these steps are not here, each step could try to build a large library,
  # like `gRPC` or `google-cloud-cpp`, that can result in the build VM
  # suffering from CPU overload (and maybe memory exhaustion).
  #
  # Note that this list of packages does not have to be perfect to be useful.
  - name: 'gcr.io/${PROJECT_ID}/cpp-samples/ci/devtools:${BUILD_ID}'
    id: 'vcpkg-warmup-shared'
    args: [ '/usr/local/vcpkg/vcpkg', 'install',
            'boost-beast', 'boost-endian', 'boost-program-options', 'boost-property-tree',
            'boost-serialization', 'boost-uuid',
            'cppcodec',
            'crc32c',
            'fmt',
            'grpc',
            'jansson', 'openssl', 'paho-mqtt',
    ]
  # Keep in mind that `google-cloud-cpp[core,speech]` is a separate cache
  # entry from `google-cloud-cpp[core,spanner]`. We prefer to list them
  # explicitly here.
  - name: 'gcr.io/${PROJECT_ID}/cpp-samples/ci/devtools:${BUILD_ID}'
    id: 'vcpkg-warmup-functions-framework-cpp'
    args: [ '/usr/local/vcpkg/vcpkg', 'install',
            'functions-framework-cpp',
    ]
  - name: 'gcr.io/${PROJECT_ID}/cpp-samples/ci/devtools:${BUILD_ID}'
    id: 'vcpkg-warmup-spanner'
    args: [ '/usr/local/vcpkg/vcpkg', 'install',
            'google-cloud-cpp[core,spanner]',
    ]
  - name: 'gcr.io/${PROJECT_ID}/cpp-samples/ci/devtools:${BUILD_ID}'
    id: 'vcpkg-warmup-speech'
    args: [ '/usr/local/vcpkg/vcpkg', 'install',
            'google-cloud-cpp[core,speech]',
    ]
  - name: 'gcr.io/${PROJECT_ID}/cpp-samples/ci/devtools:${BUILD_ID}'
    id: 'vcpkg-warmup-bigquery'
    args: [ '/usr/local/vcpkg/vcpkg', 'install',
            'google-cloud-cpp[core,bigquery]',
    ]
  - name: 'gcr.io/${PROJECT_ID}/cpp-samples/ci/devtools:${BUILD_ID}'
    id: 'vcpkg-warmup-storage'
    args: [ '/usr/local/vcpkg/vcpkg', 'install',
            'google-cloud-cpp[core,storage]',
    ]
  # Once the last `warmup-vcpkg*` step completes, the remaining steps do not
  # use much CPU and can be parallelized. But we should avoid excessive
  # parallelism before this step.
  - name: 'gcr.io/${PROJECT_ID}/cpp-samples/ci/devtools:${BUILD_ID}'
    id: 'vcpkg-warmup'
    args: [ '/usr/local/vcpkg/vcpkg', 'install',
            'google-cloud-cpp',
    ]

  - name: 'gcr.io/${PROJECT_ID}/cpp-samples/ci/devtools:${BUILD_ID}'
    waitFor: [ 'vcpkg-warmup' ]
    volumes:
      - name: 'top-level'
        path: '/b'
    args: [
        'cmake', '-G', 'Ninja', '-S', '/workspace', '-B', '/b',
        '-DCMAKE_TOOLCHAIN_FILE=/usr/local/vcpkg/scripts/buildsystems/vcpkg.cmake',
    ]
  - name: 'gcr.io/${PROJECT_ID}/cpp-samples/ci/devtools:${BUILD_ID}'
    volumes:
      - name: 'top-level'
        path: '/b'
    args: [ 'cmake', '--build', '/b', ]

  # Remove the images created by this build.
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set +e
        gcloud container images delete -q gcr.io/${PROJECT_ID}/cpp-samples/ci/devtools:${BUILD_ID}
        exit 0

  # The previous step may not run if the build fails. Garbage collect any
  # images created by this script, and/or similar scripts in this repository.
  # The main idea is to remove images created over 4 weeks ago. Because the
  # current builds create images with current timestamps, such images are not
  # likely to be in use. This step should not break the build on error, and it
  # can start running as soon as the build does.
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    waitFor: [ '-' ]
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set +e
        for image in cpp-samples/ci/devtools cpp-samples/cloud-run-hello; do
          gcloud --project=${PROJECT_ID} container images list-tags gcr.io/${PROJECT_ID}/$${image} \
              --format='get(digest)' --filter='timestamp.datetime < -P4W' | \
          xargs printf "gcr.io/${PROJECT_ID}/$${image}@$$1\n"
        done | \
        xargs -P 4 -L 32 gcloud container images delete -q --force-delete-tags
        exit 0
